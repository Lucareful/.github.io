<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python的web框架 on Luenci</title>
    <link>http://localhost:1313/categories/python%E7%9A%84web%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in Python的web框架 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/categories/python%E7%9A%84web%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>django&#43;nginx&#43;uwsgi部署漫谈</title>
      <link>http://localhost:1313/articles/1/01/django-nginx-uwsgi%E9%83%A8%E7%BD%B2%E6%BC%AB%E8%B0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django-nginx-uwsgi%E9%83%A8%E7%BD%B2%E6%BC%AB%E8%B0%88/</guid>
      <description>写在前面：关于Django的部署问题网上有很多教程，但是每个人的配置环境和遇到的情况都一样，所以在此记录下我部署过程中遇到的问题 **看官方文档：**https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html（特别重要！！！） 环境介绍 阿里云主机（Ubuntu系统） virtualenv虚拟环境 python3版本</description>
    </item>
    <item>
      <title>Django之编写URL</title>
      <link>http://localhost:1313/articles/1/01/django%E4%B9%8B%E7%BC%96%E5%86%99url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django%E4%B9%8B%E7%BC%96%E5%86%99url/</guid>
      <description>&lt;h1 id=&#34;编写url&#34;&gt;编写URL&lt;/h1&gt;
&lt;h2 id=&#34;编写规则&#34;&gt;编写规则&lt;/h2&gt;
&lt;p&gt;​	为了使其规范性，在每个新创建的App中设置独立的静态资源和模板文件夹并添加一个空白的&lt;code&gt;.py&lt;/code&gt;文件，命为&lt;code&gt;urls.py&lt;/code&gt;。如下是创建app中的文件结构：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django参数和模板</title>
      <link>http://localhost:1313/articles/1/01/django%E5%8F%82%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django%E5%8F%82%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/</guid>
      <description>render方法参数 request: 是一个固定参数。 template_name: templates 中定义的文件, 要注意路径名. 比如’templates\polls\index.html’, 参数就要写‘polls\index.html’ context: 要传入文件中用于渲染呈现的数据, 默认是字典格式 content_type: 生成的文档要使用的MIME 类型。默认为DEFAULT_CONTENT_TYPE 设置的值。 status: http的响应代码,默认是200. using: 用于加载模板使用的模板引擎的名称。 reques</description>
    </item>
    <item>
      <title>Django的ORM多表操作</title>
      <link>http://localhost:1313/articles/1/01/django%E7%9A%84orm%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django%E7%9A%84orm%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>ORM多表操作 API 函数 说明 all() 查询所有结果 filter(**kwargs) 包含了与所给筛选条件相匹配的对象 get(**kwargs) 返回与所给筛选条件相匹配的对象，返回结果有且只有一个， 如果符合筛选条件的对象超过一个或者没有都会抛出错误。 exclude(**kwargs) 它包含了与所给筛选条件不匹配的对象 order_by(*field) 对查询结果排序 用法:order_by (&amp;ldquo;price&amp;rdquo;) DESC 降序 reverse(): 对查询结果反向排序 count() 返回数据库中匹配查询(QuerySet)的对象数量 first() 返回第一条记录 last() 返回最后一条记录 exists() 如果QuerySet包含数据，</description>
    </item>
    <item>
      <title>Django的ORM字段介绍</title>
      <link>http://localhost:1313/articles/1/01/django%E7%9A%84orm%E5%AD%97%E6%AE%B5%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django%E7%9A%84orm%E5%AD%97%E6%AE%B5%E4%BB%8B%E7%BB%8D/</guid>
      <description>Django的Field详解（转载） 本文转载于：https://www.cnblogs.com/ellisonzhang/p/10679054.html 字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 1、models.AutoField 自增列 = int(11) 如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key</description>
    </item>
    <item>
      <title>Django简介</title>
      <link>http://localhost:1313/articles/1/01/django%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;django简介&#34;&gt;Django简介&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2003诞生 它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvt框架&#34;&gt;MVT（框架）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Models 模型 数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Views 视图 放和拿&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template 模板 前端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From 表单 &lt;code&gt;django&lt;/code&gt; 会根据你后台数据库字段及表单层的设计对应的给你创建HTML关于表单的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;django优点&#34;&gt;Django优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对象关系映射（Object Relational Mapping ORM）：通过定义映射类来构建数据模型，将模型与关系型数据库连接起来，使用ORM框架内置的数据库接口可实现复杂的数据操作。（简单来说就是把数据库的语句换成了python可识别的语言）&lt;/li&gt;
&lt;li&gt;URL设计：开发者可以设计任意的URL（网站地址）， 而且支持使用正则表达式设计。&lt;/li&gt;
&lt;li&gt;模板系统：提供可扩展的模板语言，模板之间具有可继承性。&lt;/li&gt;
&lt;li&gt;表单处理：可以生成各种表单模型，而且表单具有有效性检验功能。&lt;/li&gt;
&lt;li&gt;Cache系统：完善的缓存系统，可支持多种缓存方式&lt;/li&gt;
&lt;li&gt;用户管理系统：提供用户认证，权限设置和用户组功能，功能扩展性强。&lt;/li&gt;
&lt;li&gt;国际化：内置国际化系统，方便开发出多语言的网站。&lt;/li&gt;
&lt;li&gt;admin管理系统：内置admin管理系统，系统的扩展性强。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Django重定向指南（转载）</title>
      <link>http://localhost:1313/articles/1/01/django%E9%87%8D%E5%AE%9A%E5%90%91%E6%8C%87%E5%8D%97%E8%BD%AC%E8%BD%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/django%E9%87%8D%E5%AE%9A%E5%90%91%E6%8C%87%E5%8D%97%E8%BD%AC%E8%BD%BD/</guid>
      <description>原文转载自：https://www.jianshu.com/p/5e322fb5b61c（简书：爱吃鱼de大猫） 当你使用 Django 框架构建 Python Web 应用程序时，在某些时候需要将用户从一个URL重定向到另一个URL。本指南将提供 HTTP 重定向所需要了解的所有知识，以及在 Django 中该如何处理。 完成本教程，你将学到： 能够将用户从一个URL重定向到另一个URL 了解临时重定向和永久重定向之间的区别 使用重定向时避免常见陷阱 本教程假设你</description>
    </item>
    <item>
      <title>flask框架学习</title>
      <link>http://localhost:1313/articles/1/01/flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</guid>
      <description>基本概念 1.静态资源 ​ 一旦准备好资源，不在需要经常变化的资源.由于该资源不需要经常变化，所以可以提前准备.比如png/jpg/css/js等文件 2.动态资源 ​ 和静态资源相反，这种资源会经常变化.比如，我们要编写一个电商网站，我们无法预测用户在浏览商品时选择什么样的条件。 根据用户选择条件不同，我们给用户提供可供选择的商品就不同.这种资源无法提前准备。 3.模板文件 ​ 在用户搜索各种商品的时候，大家是否发</description>
    </item>
  </channel>
</rss>
