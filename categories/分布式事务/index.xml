<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>分布式事务 on Luenci</title>
    <link>http://localhost:1313/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 分布式事务 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊聊分布式事务</title>
      <link>http://localhost:1313/articles/1/01/%E8%81%8A%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/%E8%81%8A%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;聊聊分布式事务&#34;&gt;聊聊分布式事务&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;​    随着业务的快速发展、业务复杂度越来越高，传统单体应用逐渐暴露出了一些问题，例如开发效率低、可维护性差、架构扩展性差、部署不灵活、健壮性差等等。&lt;/p&gt;
&lt;p&gt;​    微服务架构是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。每个微服务仅关注于完成一件任务并很好地完成该任务。&lt;/p&gt;
&lt;h2 id=&#34;微服务架构的特点&#34;&gt;微服务架构的特点&lt;/h2&gt;
&lt;p&gt;微服务架构的优势非常明显，在近些年迅猛发展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将复杂的业务拆分成多个小的业务，能够达到更好的业务复用，有利于人员组织分工&lt;/li&gt;
&lt;li&gt;服务独立部署，独立扩容，每个服务的修改和部署对其他服务没有影响&lt;/li&gt;
&lt;li&gt;每个服务可以根据业务场景选取合适的编程语言和数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微服务有以上的优势，但是微服务也带来不少的新问题，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务数量众多，其测试、部署、监控等都变的更加困难。&lt;/li&gt;
&lt;li&gt;单体应用拆分为分布式系统后，进程间的通讯机制和故障处理措施变的更加复杂&lt;/li&gt;
&lt;li&gt;系统微服务化后，原先是一个服务内部的本地数据库事务，被拆到了多个服务，需要在分布式环境下保证事务的一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的各项问题中，1、2都可以通过近几年涌现的各项微服务技术解决，例如&lt;code&gt;Kubernetes&lt;/code&gt;提供了服务发现、服务治理等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此分布式事务已经成为微服务落地最大的阻碍，也是最具挑战性的一个技术难题。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;cap-理论&#34;&gt;CAP 理论&lt;/h3&gt;
&lt;p&gt;一个分布式系统最多只能同时满足 &lt;code&gt;一致性（Consistency）&lt;/code&gt;、&lt;code&gt;可用性（Availability）&lt;/code&gt;和&lt;code&gt;分区容错性（Partition tolerance）&lt;/code&gt;这三项中的两项。&lt;/p&gt;
&lt;h2 id=&#34;分布式事务方案&#34;&gt;分布式事务方案&lt;/h2&gt;
&lt;p&gt;分布式事务模式常见的有&lt;code&gt;XA&lt;/code&gt;、&lt;code&gt;TCC&lt;/code&gt;、&lt;code&gt;SAGA&lt;/code&gt;、&lt;code&gt;可靠消息&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
