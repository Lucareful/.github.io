<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>监控 on Luenci</title>
    <link>http://localhost:1313/categories/%E7%9B%91%E6%8E%A7/</link>
    <description>Recent content in 监控 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/categories/%E7%9B%91%E6%8E%A7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prometheus 入门实操</title>
      <link>http://localhost:1313/articles/1/01/prometheus-%E5%85%A5%E9%97%A8%E5%AE%9E%E6%93%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/prometheus-%E5%85%A5%E9%97%A8%E5%AE%9E%E6%93%8D/</guid>
      <description>Prometheus 入门实操 参考文章：Prometheus监控Linux主机 - 吕振江 - 博客园 (cnblogs.com) 安装 1 2 3 4 5 6 7 8 9 # 下载 wget https://github.com/prometheus/prometheus/releases/download/v2.44.0/prometheus-2.44.0.linux-amd64.tar.gz # 解压 tar zxf prometheus-2.44.0.linux-amd64.tar.gz # 移动 mv prometheus-2.24.1.linux-amd64/* /usr/local/prometheus # 将本机上报 sed -i &amp;#39;s/localhost/你的主机ip/g&amp;#39; /usr/local/prometheus/prometheus.yml 启动(systemed，守护进程) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cat &amp;lt;&amp;lt;EOF &amp;gt; /usr/lib/systemd/system/prometheus.service [Unit] Description=prometheus After=network.target [Service] Type=simple ExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/usr/local/prometheus/data/ --web.enable-lifecycle --storage.tsdb.retention.time=30d Restart=on-failure [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl start prometheus systemctl status prometheus &amp;amp;&amp;amp; systemctl enable prometheus 访问 Ip:9090 管理接口 1 2 3 4 5 6 7 8 9 10 11 12 $ curl http://ip:9090/-/healthy Prometheus is Healthy. # 健</description>
    </item>
    <item>
      <title>夜莺监控入门</title>
      <link>http://localhost:1313/articles/1/01/%E5%A4%9C%E8%8E%BA%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/%E5%A4%9C%E8%8E%BA%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;引子&#34;&gt;引子&lt;/h1&gt;
&lt;h2 id=&#34;监控系统必要性&#34;&gt;监控系统必要性&lt;/h2&gt;
&lt;p&gt;​    作为运维者，第一个接触的基本上是监控平台，各种各样的监控，看各种各样的指标，好像没有监控就觉得不正常，那么为什么需要监控呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预防故障，例如当磁盘空间增长到一定的程度的时候，就会产生故障，这个时候监控系统的作用就是当达到一个阀值的时候，发出告警，然后进行处理。&lt;/li&gt;
&lt;li&gt;预测变化趋势，例如我的分布式文件系统，每天数据增长1T空间，那么我总共有多少空间，剩余空间大小，是否要进行扩容等操作。&lt;/li&gt;
&lt;li&gt;当故障发生的时候，能提供给我基本信息给与我排查的思路，例如redis不可读，是否能看到是哪个实例，能看到相关的日志信息，能测试是否刻读写，能查看哪个是master。&lt;/li&gt;
&lt;li&gt;监控系统关键指标，例如对于web服务器来说，响应速度，来判断是否中间件有问题，是否数据库有问题，还是网络有问题；活跃的用户数，每天我的网站有多少用户访问；有多少新注册的用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;​	夜莺监控（ Nightingale ）是一款国产、开源云原生监控分析系统，采用 All-In-One 的设计，集数据采集、可视化、监控告警、数据分析于一体。于 2020 年 3 月 20 日，在 github 上发布 v1 版本，已累计迭代 60 多个版本。从 v5 版本开始与 Prometheus、VictoriaMetrics、Grafana、Telegraf、Datadog 等生态紧密协同集成，提供开箱即用的企业级监控分析和告警能力，已有众多企业选择将 Prometheus + AlertManager + Grafana 的组合方案升级为使用夜莺监控。夜莺监控，由滴滴开发和开源，并于 2022 年 5 月 11 日，捐赠予中国计算机学会开源发展委员会（CCF ODC），为 CCF ODC 成立后接受捐赠的第一个开源项目。夜莺监控的核心开发团队，也是Open-Falcon项目原核心研发人员。&lt;/p&gt;
&lt;h2 id=&#34;产品介绍&#34;&gt;产品介绍&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/arch-product.png&#34; alt=&#34;img&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开箱即用：支持 Docker、Helm Chart、云服务等多种部署方式；集数据采集、监控告警、可视化为一体；内置多种监控仪表盘、快捷视图、告警规则模板，导入即可快速使用；大幅降低云原生监控系统的建设成本、学习成本、使用成本&lt;/li&gt;
&lt;li&gt;云原生：以交钥匙的方式快速构建企业级的云原生监控体系，支持 Categraf、Telegraf、Grafana-agent 等多种采集器，支持 Prometheus、VictoriaMetrics、M3DB、ElasticSearch 等多种数据库，兼容支持导入 Grafana 仪表盘，与云原生生态无缝集成&lt;/li&gt;
&lt;li&gt;专业告警：可视化的告警配置和管理，支持丰富的告警规则，提供屏蔽规则、订阅规则的配置能力，支持告警多种送达渠道，支持告警自愈、告警事件管理等&lt;/li&gt;
&lt;li&gt;灵活扩展、中心化管理：夜莺监控，可部署在 1 核 1G 的云主机，可在上百台机器集群化部署，可运行在 K8s 中；也可将时序库、告警引擎等组件下沉到各机房、各 Region，兼顾边缘部署和中心化统一管理，解决数据割裂，缺乏统一视图的难题&lt;/li&gt;
&lt;li&gt;高性能、高可用：得益于夜莺的多数据源管理引擎，和夜莺引擎侧优秀的架构设计，借助于高性能时序库，可以满足数亿时间线的采集、存储、告警分析场景，节省大量成本；夜莺监控组件均可水平扩展，无单点，已在上千家企业部署落地，经受了严苛的生产实践检验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	Nightingale 可以接收各种采集器上报的监控数据，转存到时序库（可以支持Prometheus、M3DB、VictoriaMetrics、Thanos等），并提供告警规则、屏蔽规则、订阅规则的配置能力，提供监控数据的查看能力，提供告警自愈机制（告警触发之后自动回调某个webhook地址或者执行某个脚本），提供历史告警事件的存储管理、分组查看的能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus 概念入门</title>
      <link>http://localhost:1313/articles/1/01/prometheus-%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/prometheus-%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;prometheus-概念入门&#34;&gt;Prometheus 概念入门&lt;/h1&gt;
&lt;h1 id=&#34;数据模型&#34;&gt;数据模型&lt;/h1&gt;
&lt;p&gt;​	Prometheus 所有采集的监控数据均以指标（metric）的形式保存在内置的&lt;a href=&#34;https://www.wikiwand.com/zh/%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97&#34;&gt;时间序列&lt;/a&gt;数据库当中（TSDB）：属于同一指标名称，同一标签集合的、有时间戳标记的数据流。除了存储的时间序列，Prometheus 还可以根据查询请求产生临时的、衍生的时间序列作为返回结果。&lt;/p&gt;
&lt;h2 id=&#34;指标名称和标签&#34;&gt;指标名称和标签&lt;/h2&gt;
&lt;p&gt;每一条时间序列由指标名称（Metrics Name）以及一组标签（键值对）唯一标识。其中指标的名称（metric name）可以反映被监控样本的含义（例如，&lt;code&gt;http_requests_total&lt;/code&gt; — 表示当前系统接收到的 HTTP 请求总量），指标名称只能由 ASCII 字符、数字、下划线以及冒号组成，同时必须匹配正则表达式 &lt;code&gt;[a-zA-Z_:][a-zA-Z0-9_:]*&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[info] 注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;冒号用来表示用户自定义的记录规则，不能在 exporter 中或监控对象直接暴露的指标中使用冒号来定义指标名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过使用标签，Prometheus 开启了强大的多维数据模型：对于相同的指标名称，通过不同标签列表的集合，会形成特定的度量维度实例（例如：所有包含度量名称为 &lt;code&gt;/api/tracks&lt;/code&gt; 的 http 请求，打上 &lt;code&gt;method=POST&lt;/code&gt; 的标签，就会形成具体的 http 请求）。该查询语言在这些指标和标签列表的基础上进行过滤和聚合。改变任何度量指标上的任何标签值（包括添加或删除指标），都会创建新的时间序列。&lt;/p&gt;
&lt;p&gt;标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式 &lt;code&gt;[a-zA-Z_][a-zA-Z0-9_]*&lt;/code&gt;。其中以 &lt;code&gt;__&lt;/code&gt; 作为前缀的标签，是系统保留的关键字，只能在系统内部使用。标签的值则可以包含任何 &lt;code&gt;Unicode&lt;/code&gt; 编码的字符。&lt;/p&gt;
&lt;h2 id=&#34;样本&#34;&gt;样本&lt;/h2&gt;
&lt;p&gt;在时间序列中的每一个点称为一个样本（sample），样本由以下三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指标（metric）：指标名称和描述当前样本特征的 labelsets；&lt;/li&gt;
&lt;li&gt;时间戳（timestamp）：一个精确到毫秒的时间戳；&lt;/li&gt;
&lt;li&gt;样本值（value）： 一个 folat64 的浮点型数据表示当前样本的值。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>VictoriaMetricsn 原理入门</title>
      <link>http://localhost:1313/articles/1/01/victoriametricsn-%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/victoriametricsn-%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;victoriametricsn-原理入门&#34;&gt;VictoriaMetricsn 原理入门&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;VictoriaMetrics，是一个快速高效、经济并且可扩展的监控解决方案和时序&lt;a href=&#34;https://cloud.tencent.com/solution/database?from_column=20065&amp;amp;from=20065&#34;&gt;数据库&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	谈到VictoriaMetrics就必须要提到Prometheus，VictoriaMetrics是一个新兴的监控解决方案。它借助Prometheus强大的exporter生态、成熟的规范、服务发现等优点等，融入到Prometheus生态中。VictoriaMetrics官网很多兼容Prometheus参数解释都是直接跳转到Prometheus官网。&lt;/p&gt;
&lt;p&gt;​	VictoriaMetrics可以作为Prometheus的长期远程存储方案，当然 VictoriaMetrics 也可以完全取代 Prometheus，因为 VictoriaMetrics 基本支持 Prometheus配置文件、PromQL、各类API、数据格式等等。&lt;/p&gt;
&lt;h3 id=&#34;victoriametrics-优点&#34;&gt;VictoriaMetrics 优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;远程存储：可作为单一或多个Prometheus的远程存储&lt;/li&gt;
&lt;li&gt;安装简单：单节点架构一条命令就可以部署完毕（集群方式稍微复杂一些，但也很好理解）&lt;/li&gt;
&lt;li&gt;兼容性：PromQL兼容和增强的MetricsQL&lt;/li&gt;
&lt;li&gt;Grafana兼容：VM可替换Grafana的Prometheus数据源（经测试，线上数据源直接替换后100%兼容）&lt;/li&gt;
&lt;li&gt;低内存：更低的内存占用，官方对比Prometheus，可以释放7倍左右内存空间（线上对比大概4倍）&lt;/li&gt;
&lt;li&gt;高压缩比：提供存储数据高压缩，官方说可以比Prometheus减少7倍的存储空间（线上对比大概是4~5倍）&lt;/li&gt;
&lt;li&gt;高性能：查询性能比Prometheus更快&lt;/li&gt;
&lt;li&gt;支持水平扩容&amp;amp;HA：基于VM集群版实现&lt;/li&gt;
&lt;li&gt;支持多租户：主要针对集群版&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;victoriametrics-缺点&#34;&gt;VictoriaMetrics 缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;图形化做的不好，虽然有vmui，但功能很少&lt;/li&gt;
&lt;li&gt;告警功能需要单独配置vmalert，而且vmalert只有api管理和查看，暂时没用图形界面&lt;/li&gt;
&lt;li&gt;没有类似Prometheus的WAL日志，突然故障可能会丢失部分数据&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
