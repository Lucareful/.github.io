<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java基本知识点 on Luenci</title>
    <link>http://localhost:1313/tags/java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
    <description>Recent content in Java基本知识点 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E7%82%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java基本知识</title>
      <link>http://localhost:1313/articles/1/01/java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义方法的格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;修饰符	返回值类型	&lt;span style=&#34;color:#50fa7b&#34;&gt;方法名称&lt;/span&gt;(参数类型 参数名称，....){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	方法体;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; 返回值;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;修饰符：现阶段的固定方法，&lt;code&gt;public static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值类型：也就是方法最终产生的数据结果是什么类型&lt;/li&gt;
&lt;li&gt;方法名称：方法的名字，规则和变量一样，小驼峰&lt;/li&gt;
&lt;li&gt;参数类型：进入方法的数据对应的变量名称&lt;/li&gt;
&lt;li&gt;方法体：方法需要做的事情，若干行代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;：两个作用。
&lt;ul&gt;
&lt;li&gt;停止当前方法&lt;/li&gt;
&lt;li&gt;将后面的结果数据返回值返还给调用处&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：也就是方法执行后最终产生的数据结果&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;return后面的“返回值”，必须和方法名称前面的“返回值类型”，保持对应&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方法应该定义在类中，但是不能在方法 在定义方法。不能嵌套&lt;/li&gt;
&lt;li&gt;方法定义的前后顺序无所谓&lt;/li&gt;
&lt;li&gt;方法定义之后不会执行，若要执行，必须调用：单独调用，打印调用，赋值调用&lt;/li&gt;
&lt;li&gt;如果方法有返回值，那么必须写上“return 返回值”，不能缺失&lt;/li&gt;
&lt;li&gt;return后面的返回值类型必须和方法的返回值类型相同，对应。&lt;/li&gt;
&lt;li&gt;对于一个&lt;code&gt;void&lt;/code&gt;没有返回值的方法，没有返回值。&lt;/li&gt;
&lt;li&gt;一个方法中可以含有多个&lt;code&gt;return&lt;/code&gt;语句，但是必须保证同时只有一个会被执行到。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;方法重载&#34;&gt;方法重载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;多个方法的名称一样，但是参数列表不一样&lt;/li&gt;
&lt;li&gt;优点：只需要记住唯一一个方法名称，就可以实现类似的多个功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关因素&#34;&gt;相关因素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参数个数不同&lt;/li&gt;
&lt;li&gt;参数类型不同&lt;/li&gt;
&lt;li&gt;参数的多类型顺序不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;无关因素&#34;&gt;无关因素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与参数的名称无关&lt;/li&gt;
&lt;li&gt;与方法的返回值类型无关&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数组&#34;&gt;数组&lt;/h1&gt;
&lt;p&gt;数组的概念：是一种容器，可以同时存放多个数据值。
数组的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.数组是一种引用数据类型&lt;/li&gt;
&lt;li&gt;2.数组当中的多个数据，类型必须统一&lt;/li&gt;
&lt;li&gt;3.数组的长度在程序运行期间不可改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组声明&#34;&gt;数组声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。
两种常见的初始化方式：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1.动态初始化（指定长度）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.静态初始化（指定内容）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态初始化数组的格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明格式：&lt;code&gt;数据类型[]数组名称=new数据类型[数组长度]；&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态初始化数组的格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明格式(标准)：&lt;code&gt;数据类型[] 数组名称 = new 数据类型[] {元素1，元素2，...}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;省略格式：&lt;code&gt;数据类型[] 数组名称 = {元素1，元素2，...}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意事项：
1.静态初始化没有直接指定长度，但是仍然会自动推算得到长度。&lt;/p&gt;
&lt;p&gt;2.静态初始化标准格式可以拆分成为两个步骤。&lt;/p&gt;
&lt;p&gt;3.动态初始化也可以拆分成为两个步骤。&lt;/p&gt;
&lt;p&gt;4.静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不确定数组当中的具体内容，用动态初始化；否则，已经确定了具体的内容，用静态初始化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值。&lt;/p&gt;
&lt;p&gt;规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是整数类型，那么默认为&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是浮点类型，那么默认为&lt;code&gt;0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是字符类型，那么默认为&lt;code&gt;&#39;\u0000&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是布尔类型，那么默认为&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是引用类型，那么默认为&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;数组的长度一旦创建，程序运行期间，长度不可变&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Java语言概述</title>
      <link>http://localhost:1313/articles/1/01/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h2 id=&#34;java语言简史&#34;&gt;Java语言简史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java语言发展历史&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1995年Sun公司发布Java1.0版本&lt;/li&gt;
&lt;li&gt;1997年发布Java1.1版本&lt;/li&gt;
&lt;li&gt;1998年发布Java1.2版本&lt;/li&gt;
&lt;li&gt;2000年发布Java1.3版本&lt;/li&gt;
&lt;li&gt;2002年发布Java1.4版本&lt;/li&gt;
&lt;li&gt;2004年发布Java5版本（更新频率较大）&lt;/li&gt;
&lt;li&gt;2006年发布Java6版本&lt;/li&gt;
&lt;li&gt;2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java7版本&lt;/li&gt;
&lt;li&gt;2014年发布Java8版本（更新频率较大，市场占有率最大）&lt;/li&gt;
&lt;li&gt;2017年9月发布Java9版本&lt;/li&gt;
&lt;li&gt;2018年3月发布Java10版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-平台的三个版本&#34;&gt;Java 平台的三个版本&lt;/h2&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这使软件开发人员、服务提供商和设备生产商可以针对特定的市场进行开发：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-sejava-platformstandard-edition&#34;&gt;Java SE（Java Platform，Standard Edition）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-eejava-platformenterprise-edition&#34;&gt;Java EE（Java Platform，Enterprise Edition）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-mejava-platformmicro-edition&#34;&gt;Java ME（Java Platform，Micro Edition）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;开发环境，推荐Eclipse,NetBeans,这两个IDE可以挂接对应的插件，进行开发。还有一点，那就是这三个应用，se,标准应用，以学习为主，由于界面，开发成本，速度等问题，很少用来做程序，但不是说，他不能做程序，Eclipse,NetBeans,都是javase写起来的。Me,移动设备应用，对于一些中高端应用还好了！以前用他做过手机游戏，呵呵呵！EE,企业级解决方案，开发套件全部免费，可控性好，安全性高，乃是当前B2B的规范。再者，这三个应用，都需要虚拟机的支持。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Java面向对象</title>
      <link>http://localhost:1313/articles/1/01/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象 三大特征：封装性，继承性，多态性。 继承是多态的前提，如果没有继承，就没有多态 继承主要解决的问题是：共性抽取 继承 父类也可以叫基类，超类 子类也可以叫派生类 子类可以访问父类的属性和方法，反之父类不能访问子类的属性和方法 直接通过子类对象访问成员变量： 等号左边是谁，就优先用谁，没有则向上找。 间接通过成员方法访问成员变量： 该方法属于谁，就优先用谁，没有则向上找。 成员变量方法 局部变量：直接写成员变量名 本</description>
    </item>
  </channel>
</rss>
