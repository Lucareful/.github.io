<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux知识 on Luenci</title>
    <link>http://localhost:1313/tags/linux%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in Linux知识 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/linux%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux学习（一）</title>
      <link>http://localhost:1313/articles/1/01/linux%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/linux%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;linux操作系统&#34;&gt;Linux操作系统&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;一切皆文件&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统启动流程&#34;&gt;系统启动流程&lt;/h2&gt;
&lt;p&gt;引导图&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502160423268.png&#34; alt=&#34;引导图&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最初始阶段
当我们打开计算机电源，计算机会自动从主板的&lt;code&gt;BlOS&lt;/code&gt;（Basic Input/output System）读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件（硬盘，网络接口，键盘，串口，并口）。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一步，计算机将从你所选择的存储设备中读取起始的512 bytes（比如光盘一开是的512 bytes，如果我们从光盘启动的话）。这&lt;code&gt;512bytes&lt;/code&gt;叫做主引导记录&lt;code&gt;MBR&lt;/code&gt;（master boot record）。&lt;code&gt;MBR&lt;/code&gt;会告诉电脑从该设备的某一个分区（partition）来装载引导加载程序（boot loader）。&lt;code&gt;Boot loader&lt;/code&gt;储存有操作系统（OS）的相关信息，比如操作系统名称，操作系统内核（kernel）所在位置等。常用的&lt;code&gt;boot loader&lt;/code&gt;有&lt;code&gt;GRUB&lt;/code&gt;和&lt;code&gt;LILO&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随后，&lt;code&gt;boot loade&lt;/code&gt;r会帮助我们加载&lt;code&gt;kernel&lt;/code&gt;。&lt;code&gt;kernel&lt;/code&gt;实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过&lt;code&gt;kernel&lt;/code&gt;传达给硬件。&lt;code&gt;Windows&lt;/code&gt;和&lt;code&gt;Linux&lt;/code&gt;各自有自己&lt;code&gt;kernel&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;狭义的操作系统就是指&lt;code&gt;kernel&lt;/code&gt;，广义的操作系统包括&lt;code&gt;kernel&lt;/code&gt;以及&lt;code&gt;kernel&lt;/code&gt;之上的各种应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（Linus Torvalds与其说是Linux之父，不如说是&lt;code&gt;Linux kernel&lt;/code&gt;之父。他依然负责&lt;code&gt;Linux kernel&lt;/code&gt;的开发和维护。至于&lt;code&gt;Ubuntu&lt;/code&gt;，&lt;code&gt;Red Hat&lt;/code&gt;，它们都是基于相同的&lt;code&gt;kernel&lt;/code&gt;之上，囊括了不同的应用和界面构成的一个更加完整的操作系统版本。）实际上，我们可以在多个分区安装&lt;code&gt;boot loader&lt;/code&gt;，每个&lt;code&gt;boot loader&lt;/code&gt;对应不同的操作系统，在读取&lt;code&gt;MBR&lt;/code&gt;的时候选择我们想要启动的boot loader。这就是多操作系统的原理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小结：&lt;code&gt;BlOS -&amp;gt; MBR -&amp;gt; boot loader -&amp;gt; kernel&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kernel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们加载的是Linux kernel，Linux kernel开始工作。kernel会首先预留自己运行所需的内存空间，然后通过驱动程序（driver）检测计算机硬件。这样，操作系统就可以知道自己有哪些硬件可用。随后，kernel会启动一个init进程。它是Linux系统中的1号进程（Linux系统没有0号进程）。到此，kernel就完成了在计算机启动阶段的工作，交接给init来管理。&lt;/li&gt;
&lt;li&gt;小结：&lt;code&gt;kernel -&amp;gt; init process &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;init process&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（根据boot loader的选项，Linux此时可以进入单用户模式（single user mode））。在此模式下，初始脚本还没有开始执行，我们可以检测并修复计算机可能存在的错误）随后，init会运行一系列的初始脚本（startup scripts），这些脚本是Linux中常见的shell scripts。这些脚本执行如下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置计算机名称，时区，检测文件系统，挂载硬盘，清空临时文件，设置网络等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当这些初始脚本，操作系统已经完全准备好了，只是，还没有人可以登录！！！init会给出登录（login）对话框，或者是图形化的登录界面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入用户名（比如说luenci）和密码，DONE！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在此后的过程中，你将以用户（user）luenci的身份操作电脑。此外，根据你创建用户时的设定，Linux还会将你归到某个组（group）中，比如可以是stupid组，或者是luenci组。所以你将是用户luenci，同时是luenci组的组员。（注意，组luenci和用户luenci只是重名而已，就好想你可以叫Dell，同时还是Dell公司的老板一样。你完全也可以是用户luenci，同时为stupid组的组员）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启动级别&#34;&gt;启动级别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;7种运行级别&lt;/p&gt;
&lt;p&gt;运行级别（&lt;code&gt;Runlevel&lt;/code&gt;）指的是Unix或者Linux等类Unix操作系统的运行模式，不同的运行模式下系统的功能也有所有不同。Linux 系统下通常分为&lt;code&gt;7&lt;/code&gt;种运行级别，分别是从&lt;code&gt;0&lt;/code&gt;到&lt;code&gt;6&lt;/code&gt;。各级别介绍如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&amp;ndash;停机模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这种模式下，系统处于停机状态，系统默认运行级别不能设为&lt;code&gt;0&lt;/code&gt;，否则将不能正常启动。这个运行级别主要用于关闭任务，在&lt;code&gt;/etc/rc0.d&lt;/code&gt;目录下的各个连接命令都是此级别的命令，在关闭系统时，这些命令将被逐个执行。它 们会杀掉所有进程、关闭虚拟内存和交换文件、卸载文件系统和交换分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;&amp;ndash; 单用户模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这种运行模下，系统处于单用户工作状态，登录用户具有root权限，文件系统被加载但是网络却没有被加载，因此也无法远程登陆。这个运行级别，只允一个用户从本地计算机上登录，&lt;code&gt;/etc/rc1.d&lt;/code&gt;目录下的所有文件与此运行级别相关连，这个运行级别一般用于系统管理与维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;2&lt;/code&gt; - -多用户模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以通过网络进行登录，但没有&lt;code&gt;NFS&lt;/code&gt;（Network File System），即网络文件统。&lt;code&gt;/etc/rc2.d&lt;/code&gt;目录下所有文件与此级别相连。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;3&lt;/code&gt; - -完全多用户模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户可以通过网络进行登录，且有&lt;code&gt;NFS&lt;/code&gt;，用户登陆后会进入控制台命令行模式。这也是缺省的运行模式，在这种运行级别下所有网络服务程序会一起运行。&lt;code&gt;/etc/rc2.d&lt;/code&gt;录下的文件与此级别相连&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;4&lt;/code&gt; - -自定义模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一种系统未使用的保留模式，&lt;code&gt;/etc/rc4.d&lt;/code&gt;目录与此级别相连。这一级别是用户自定义的运行级别，用户可以根自己的需要进行一些自定义设置。如果想要运行这一级别的话，必须在&lt;code&gt;rc3.d&lt;/code&gt;目录下放入连接文件，就像其他&lt;code&gt;rc*.d&lt;/code&gt;目录下的文件，并指明是启动还是终止进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5&lt;/code&gt; - -图形化模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Linux 下运行&lt;code&gt;X Window&lt;/code&gt;就是使用这一运行级别，用户登录后将进入图形化的GUI界面。在这一级别下除了DNS的&lt;code&gt;named&lt;/code&gt;与级别&lt;code&gt;3&lt;/code&gt;不同，其余的都相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt; &amp;ndash; 重启模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统正常关闭并重启，默认运行级别不能设为&lt;code&gt;5&lt;/code&gt;，否则系统将不能正常启动。&lt;code&gt;/etc/rc6.d&lt;/code&gt;目录与此级别相连。在这一运行级别下，不会关闭电源，&lt;code&gt;/etc/rc6.d&lt;/code&gt;目录下的连接与&lt;code&gt;rc0.d&lt;/code&gt;目录下的连接基本相同；不同之处在于，虽然它们都执行&lt;code&gt;halt&lt;/code&gt;（关闭）命令，但是给&lt;code&gt;halt&lt;/code&gt;传递的参数不同，所级别&lt;code&gt;6&lt;/code&gt;会重新启动系统而&lt;code&gt;0&lt;/code&gt;会关闭系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Linux学习（二）</title>
      <link>http://localhost:1313/articles/1/01/linux%E5%AD%A6%E4%B9%A0%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/linux%E5%AD%A6%E4%B9%A0%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;linux操作系统二&#34;&gt;Linux操作系统（二）&lt;/h1&gt;
&lt;h2 id=&#34;进程命令&#34;&gt;进程命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt;  显示所有进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux | grep &#39;&#39;&lt;/code&gt; 筛选出相关进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204505096.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kill  pid&lt;/code&gt; 杀死相关的pid进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill - 9 pid&lt;/code&gt; 强制杀死进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204832777.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jobs&lt;/code&gt;查看进程的工作号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fg %工作号&lt;/code&gt;后台程序调到前台运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;硬盘分区&#34;&gt;硬盘分区&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fdisk -l /dev/磁盘名&lt;/code&gt;查看对应磁盘名的详细信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502212407780.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
