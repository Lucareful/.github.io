<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Open Tracing on Luenci</title>
    <link>http://localhost:1313/tags/open-tracing/</link>
    <description>Recent content in Open Tracing on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/open-tracing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊聊链路追踪 OpenTracing</title>
      <link>http://localhost:1313/articles/1/01/%E8%81%8A%E8%81%8A%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-opentracing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/%E8%81%8A%E8%81%8A%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-opentracing/</guid>
      <description>&lt;h1 id=&#34;聊聊链路追踪-opentracing&#34;&gt;聊聊链路追踪 &lt;code&gt;OpenTracing&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;什么是-tracing&#34;&gt;什么是 Tracing&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/logging-metrics-tracing.o.png&#34; alt=&#34;Logging Metrics Tracing&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;对 Tracing 的定义是，在软件工程中，Tracing 指使用特定的日志记录程序的执行信息，与之相近的还有两个概念，它们分别是 Logging 和 Metrics。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logging：用于记录离散的事件，包含程序执行到某一点或某一阶段的详细信息。&lt;/li&gt;
&lt;li&gt;Metrics：可聚合的数据，且通常是固定类型的时序数据，包括 Counter、Gauge、Histogram 等。&lt;/li&gt;
&lt;li&gt;Tracing：记录单个请求的处理流程，其中包括服务调用和处理时长等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时这三种定义相交的情况也比较常见。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logging &amp;amp; Metrics：可聚合的事件。例如分析某对象存储的 &lt;code&gt;Nginx&lt;/code&gt; 日志，统计某段时间内 GET、PUT、DELETE、OPTIONS 操作的总数。&lt;/li&gt;
&lt;li&gt;Metrics &amp;amp; Tracing：单个请求中的可计量数据。例如 &lt;code&gt;SQL&lt;/code&gt; 执行总时长、&lt;code&gt;gRPC&lt;/code&gt; 调用总次数。&lt;/li&gt;
&lt;li&gt;Tracing &amp;amp; Logging：请求阶段的标签数据。例如在 Tracing 的信息中标记详细的错误原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对每种分析需求，我们都有非常强大的集中式分析工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Logging：&lt;a href=&#34;https://www.elastic.co/&#34;&gt;ELK&lt;/a&gt;，近几年势头最猛的日志分析服务，无须多言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics：&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;，第二个加入 &lt;code&gt;CNCF&lt;/code&gt; 的开源项目，非常好用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tracing：&lt;a href=&#34;http://opentracing.io/&#34;&gt;OpenTracing&lt;/a&gt; 和 &lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;Jaeger&lt;/a&gt;，Jaeger 是 &lt;code&gt;Uber &lt;/code&gt;开源的一个兼容 &lt;code&gt;OpenTracing&lt;/code&gt; 标准的分布式追踪服务。目前 Jaeger 也加入了 &lt;code&gt;CNCF&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;​	分布式追踪系统大体分为三个部分，数据采集、数据持久化、数据展示。数据采集是指在代码中埋点，设置请求中要上报的阶段，以及设置当前记录的阶段隶属于哪个上级阶段。数据持久化则是指将上报的数据落盘存储，例如 Jaeger 就支持多种存储后端，可选用 &lt;code&gt;Cassandra&lt;/code&gt; 或者 &lt;code&gt;Elasticsearch&lt;/code&gt;。数据展示则是前端根据 Trace ID 查询与之关联的请求阶段，并在界面上呈现。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/request-demonstration.o.png&#34; alt=&#34;Request Demonstration&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;上图是一个请求的流程例子，请求从客户端发出，到达负载均衡，再依次进行认证、计费，最后取到目标资源。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/opentracing-demonstration.o.png&#34; alt=&#34;OpenTracing Demonstration&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;请求过程被采集之后，会以上图的形式呈现，横坐标是时间，圆角矩形是请求的执行的各个阶段。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
