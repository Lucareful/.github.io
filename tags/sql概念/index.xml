<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SQL概念 on Luenci</title>
    <link>http://localhost:1313/tags/sql%E6%A6%82%E5%BF%B5/</link>
    <description>Recent content in SQL概念 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/sql%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL数据库引擎和数据类型</title>
      <link>http://localhost:1313/articles/1/01/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h2 id=&#34;数据库引擎介绍&#34;&gt;&lt;strong&gt;数据库引擎介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、存储引擎其实就是对于数据库文件的一种存取机制，如何实现存储数据，如何为存储的数据建立索引以及如何更新，查询数据等技术实现的方法。&lt;/li&gt;
&lt;li&gt;2、MySQL中的数据用各种不同的技术存储在文件（或内存）中，这些技术中的每一种技术都使用不同的存储机制，索引技巧，锁定水平并且最终提供广泛的不同功能和能力。在MySQL中将这些不同的技术及配套的相关功能称为存储引擎。&lt;/li&gt;
&lt;li&gt;3、根据需求可以在表中设置不同的存储引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看mysql中的引擎&#34;&gt;查看mysql中的引擎&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200605131656597.png&#34; alt=&#34;查看引擎&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;mysql中常用的几种存储引擎&#34;&gt;MySQL中常用的几种存储引擎&lt;/h3&gt;
&lt;h3 id=&#34;1myisam存储引擎&#34;&gt;1．&lt;code&gt;MyISAM&lt;/code&gt;存储引擎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存放的位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL如果使用&lt;code&gt;MyISAM&lt;/code&gt;存储引擎，数据库文件类型就包括&lt;code&gt;.frm&lt;/code&gt;、&lt;code&gt;.MYD&lt;/code&gt;、&lt;code&gt;.MYI&lt;/code&gt;，默认存放位置是&lt;code&gt;C:\Documentsand Settings\All Users\Application Data\MySQL\MySQL Server 5.1\data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存放的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt; 这种存储引擎不支持事务，不支持行级锁，只支持并发插入的表锁，主要用于高负载的select。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;也是使用B+tree索引但是和&lt;code&gt;Innodb&lt;/code&gt;的在具体实现上有些不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该引擎基于&lt;code&gt;ISAM&lt;/code&gt;数据库引擎，除了提供&lt;code&gt;ISAM&lt;/code&gt;里所没有的索引和字段管理等大量功能，&lt;code&gt;MyISAM&lt;/code&gt;还使用一种表格锁定的机制来优化多个并发的读写操作，但是需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间，否则碎片也会随之增加，最终影响数据访问性能。&lt;code&gt;MyISAM&lt;/code&gt;还有一些有用的扩展，例如用来修复数据库文件的&lt;code&gt;MyISAMChk&lt;/code&gt;工具和用来恢复浪费空间的 &lt;code&gt;MyISAMPack&lt;/code&gt;工具。&lt;code&gt;MyISAM&lt;/code&gt;强调了快速读取操作，主要用于高负载的select，这可能也是MySQL深受Web开发的主要原因：在Web开发中进行的大量数据操作都是读取操作，所以大多数虚拟主机提供商和Internet平台提供商（Internet Presence Provider, &lt;code&gt;IPP&lt;/code&gt;）只允许使用&lt;code&gt;MyISAM&lt;/code&gt;格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MyISAM&lt;/code&gt;类型的表支持三种不同的存储结构：静态型、动态型、压缩型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态型：指定义的表列的大小是固定（即不含有：&lt;code&gt;xblob&lt;/code&gt;、&lt;code&gt;xtext&lt;/code&gt;、&lt;code&gt;varchar&lt;/code&gt;等长度可变的数据类型），这样MySQL就会自动使用静态&lt;code&gt;MyISAM&lt;/code&gt;格式。使用静态格式的表的性能比较高，因为在维护和访问以预定格式存储数据时需要的开销很低；但这种高性能是以空间为代价换来的，因为在定义的时候是固定的，所以不管列中的值有多大，都会以最大值为准，占据了整个空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态型：如果列（即使只有一列）定义为动态的（&lt;code&gt;xblob&lt;/code&gt;, &lt;code&gt;xtext&lt;/code&gt;, &lt;code&gt;varchar&lt;/code&gt;等数据类型），这时&lt;code&gt;MyISAM&lt;/code&gt;就自动使用动态型，虽然动态型的表占用了比静态型表较少的空间，但带来了性能的降低，因为如果某个字段的内容发生改变则其位置很可能需要移动，这样就会导致碎片的产生，随着数据变化的增多，碎片也随之增加，数据访问性能会随之降低。
对于因碎片增加而降低数据访问性这个问题，有两种解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a、尽可能使用静态数据类型；&lt;/li&gt;
&lt;li&gt;b、经常使用&lt;code&gt;optimize table table_name&lt;/code&gt;语句整理表的碎片，恢复由于表数据的更新和删除导致的空间丢失。如果存储引擎不支持&lt;code&gt; optimize table table_name&lt;/code&gt;则可以转储并 重新加载数据，这样也可以减少碎片；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压缩型：如果在数据库中创建在整个生命周期内只读的表，则应该使用&lt;code&gt;MyISAM&lt;/code&gt;的压缩型表来减少空间的占用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优缺点：&lt;code&gt;MyISAM&lt;/code&gt;的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2innodb存储引擎&#34;&gt;2．&lt;code&gt;innoDB&lt;/code&gt;存储引擎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存储位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL如果使用&lt;code&gt;InnoDB&lt;/code&gt;存储引擎，数据库文件类型就包括&lt;code&gt;.frm&lt;/code&gt;、&lt;code&gt;ibdata1&lt;/code&gt;、&lt;code&gt;.ibd&lt;/code&gt;，存放位置有两个，&lt;code&gt;.frm&lt;/code&gt;文件默认存放位置是&lt;code&gt;C:\Documents and Settings\All Users\ApplicationData\MySQL\MySQL Server 5.1\data&lt;/code&gt;，&lt;code&gt;ibdata1&lt;/code&gt;、&lt;code&gt;.ibd&lt;/code&gt;文件默认存放位置是MySQL安装目录下的data文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎的mysql表提供了事务，回滚以及系统崩溃修复能力和多版本迸发控制的事务的安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;支持自增长列（auto_increment）,自增长列的值不能为空，如果在使用的时候为空的话怎会进行自动存现有的值开始增值，如果有但是比现在的还大，则就保存这个值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎支持外键（foreign key） ,外键所在的表称为子表而所依赖的表称为父表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎最重要的是支持事务，以及事务相关联功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎支持&lt;code&gt;mvcc&lt;/code&gt;的行级锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎索引使用的是B+Tree&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优缺点：&lt;code&gt;InnoDB&lt;/code&gt;的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>MySQL索引和事务</title>
      <link>http://localhost:1313/articles/1/01/mysql%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/mysql%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;索引&#34;&gt;索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;索引特点：创建与维护索引会消耗很多时间与磁盘空间，但查询速度大大提高！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，对于&lt;code&gt;students&lt;/code&gt;表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;id&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;class_id&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;gender&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小明&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小红&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;F&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小军&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果要经常根据&lt;code&gt;score&lt;/code&gt;列进行查询，就可以对&lt;code&gt;score&lt;/code&gt;列创建索引：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD INDEX idx_score (score);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;ADD INDEX idx_score (score)&lt;/code&gt;就创建了一个名称为&lt;code&gt;idx_score&lt;/code&gt;，使用列&lt;code&gt;score&lt;/code&gt;的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD INDEX idx_name_score (name, score);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如&lt;code&gt;gender&lt;/code&gt;列，大约一半的记录值是&lt;code&gt;M&lt;/code&gt;，另一半是&lt;code&gt;F&lt;/code&gt;，因此，对该列创建索引就没有意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mysql索引的类型&#34;&gt;MySQL索引的类型&lt;/h2&gt;
&lt;h3 id=&#34;1-普通索引&#34;&gt;1. 普通索引&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，&lt;code&gt;MyIASM&lt;/code&gt;中默认的&lt;code&gt;BTREE&lt;/code&gt;类型的索引，也是我们大多数情况下用到的索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;01&lt;/span&gt;  –直接创建索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;02&lt;/span&gt;  CREATE INDEX index_name ON table&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;column&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;length&lt;span style=&#34;color:#ff79c6&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;03&lt;/span&gt;  –修改表结构的方式添加索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;04&lt;/span&gt;  ALTER TABLE table_name ADD INDEX index_name ON &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;column&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;length&lt;span style=&#34;color:#ff79c6&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;05&lt;/span&gt;  –创建表的时候同时创建索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;06&lt;/span&gt;  CREATE TABLE &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;table&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; int&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;11&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; NOT NULL AUTO_INCREMENT ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;title&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; char&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;255&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;09&lt;/span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;content&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; int&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;10&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; NULL DEFAULT NULL ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;       PRIMARY KEY &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;       INDEX index_name &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;title&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;length&lt;span style=&#34;color:#ff79c6&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;14&lt;/span&gt;  –删除索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;  DROP INDEX index_name ON table
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
