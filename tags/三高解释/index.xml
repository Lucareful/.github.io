<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>三高解释 on Luenci</title>
    <link>http://localhost:1313/tags/%E4%B8%89%E9%AB%98%E8%A7%A3%E9%87%8A/</link>
    <description>Recent content in 三高解释 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/%E4%B8%89%E9%AB%98%E8%A7%A3%E9%87%8A/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>高并发,高可用,高性能</title>
      <link>http://localhost:1313/articles/1/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E6%80%A7%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E6%80%A7%E8%83%BD/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文链接：https://juejin.cn/post/6844903944955625479&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;一高并发&#34;&gt;一、高并发&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证&lt;strong&gt;系统能够同时并行处理很多请求&lt;/strong&gt;。 高并发相关常用的一些指标有&lt;strong&gt;响应时间&lt;/strong&gt;（Response Time），&lt;strong&gt;吞吐量&lt;/strong&gt;（Throughput），&lt;strong&gt;每秒查询率&lt;/strong&gt;QPS（Query Per Second），&lt;strong&gt;并发用户数&lt;/strong&gt;等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应时间&lt;/strong&gt;：系统对请求做出响应的时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：单位时间内处理的请求数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QPS&lt;/strong&gt;：每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发用户数&lt;/strong&gt;：同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何提高并发能力&#34;&gt;如何提高并发能力&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;垂直扩展&lt;/p&gt;
&lt;p&gt;（Scale Up）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;增强单机硬件性能&lt;/strong&gt;（优先）：例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升单机架构性能&lt;/strong&gt;：例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间。&lt;/li&gt;
&lt;li&gt;总结：管是提升单机硬件性能，还是提升单机架构性能，都有一个致命的不足：单机性能总是有极限的。所以互联网分布式架构设计高并发终极解决方案还是&lt;strong&gt;水平扩展&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平扩展&lt;/p&gt;
&lt;p&gt;（Scale Out）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只要增加服务器数量，就能线性扩充系统性能。水平扩展对系统架构设计是有要求的，难点在于：如何在架构各层进行可水平扩展的设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二高性能&#34;&gt;二、高性能&lt;/h1&gt;
&lt;h2 id=&#34;简介-1&#34;&gt;简介&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;简单的说，高性能（High Performance）就是指&lt;strong&gt;程序处理速度快，所占内存少，cpu占用率低&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;高并发和高性能是紧密相关的，提高应用的性能，是肯定可以提高系统的并发能力的。&lt;/li&gt;
&lt;li&gt;应用性能优化的时候，对于&lt;strong&gt;计算密集型&lt;/strong&gt;和&lt;strong&gt;IO密集型&lt;/strong&gt;还是有很大差别，需要分开来考虑。&lt;/li&gt;
&lt;li&gt;增加服务器资源（CPU、内存、服务器数量），绝大部分时候是可以提高应用的并发能力和性能 （前提是应用能够支持多任务并行计算，多服务器分布式计算才行），但也是要避免其中的一些问题，才可以更好的更有效率的利用服务器资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;提高性能的注意事项&#34;&gt;提高性能的注意事项&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;避免因为&lt;strong&gt;IO阻塞&lt;/strong&gt;让CPU闲置，导致CPU的浪费。&lt;/li&gt;
&lt;li&gt;避免&lt;strong&gt;多线程间增加锁&lt;/strong&gt;来保证同步，导致并行系统串行化。&lt;/li&gt;
&lt;li&gt;免创建、销毁、维护太多进程、线程，导致操作系统浪费资源在调度上。&lt;/li&gt;
&lt;li&gt;避免分布式系统中多服务器的关联，比如：依赖同一个mysql，程序逻辑中使用&lt;strong&gt;分布式锁&lt;/strong&gt;，导致瓶颈在mysql，分布式又变成串行化运算。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
