<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>并发编程 on Luenci</title>
    <link>http://localhost:1313/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 并发编程 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang并发编程最佳实践</title>
      <link>http://localhost:1313/articles/1/01/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;golang-并发编程最佳实践&#34;&gt;Golang 并发编程最佳实践&lt;/h1&gt;
&lt;h2 id=&#34;goroutine-定义&#34;&gt;Goroutine 定义&lt;/h2&gt;
&lt;p&gt;​    Goroutines 是与其他&lt;a href=&#34;https://golangbot.com/functions/&#34;&gt;函数&lt;/a&gt;或&lt;a href=&#34;https://golangbot.com/methods/&#34;&gt;方法&lt;/a&gt;同时运行的函数或方法。Goroutines 可以被认为是轻量级线程。与线程相比，创建 Goroutine 的成本很小。因此，Go 应用程序通常会同时运行数千个 Goroutine。&lt;/p&gt;
&lt;h2 id=&#34;goroutines-相对于线程的优势&#34;&gt;Goroutines 相对于线程的优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与线程相比，Goroutines 非常便宜。它们的堆栈大小只有几 kb，堆栈可以根据应用程序的需要增长和缩小，而在线程的情况下，堆栈大小必须指定并固定。&lt;/li&gt;
&lt;li&gt;Goroutine 被多路复用到更少数量的 OS 线程。一个包含数千个 Goroutine 的程序中可能只有一个线程。如果该线程中的任何 Goroutine 阻塞等待用户输入，则创建另一个 OS 线程并将剩余的 Goroutine 移动到新的 OS 线程。所有这些都由运行时处理，我们作为程序员从这些复杂的细节中抽象出来，并获得了一个干净的 API 来处理并发性。&lt;/li&gt;
&lt;li&gt;Goroutines 使用通道进行通信。通道通过设计防止在使用 Goroutine 访问共享内存时发生竞争条件。通道可以被认为是 Goroutine 进行通信的管道。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
