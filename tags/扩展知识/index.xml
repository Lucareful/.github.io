<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>扩展知识 on Luenci</title>
    <link>http://localhost:1313/tags/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 扩展知识 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C结构体打包技艺</title>
      <link>http://localhost:1313/articles/1/01/c%E7%BB%93%E6%9E%84%E4%BD%93%E6%89%93%E5%8C%85%E6%8A%80%E8%89%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/c%E7%BB%93%E6%9E%84%E4%BD%93%E6%89%93%E5%8C%85%E6%8A%80%E8%89%BA/</guid>
      <description>&lt;h1 id=&#34;失传的-c-结构体打包技艺转&#34;&gt;失传的 C 结构体打包技艺（转）&lt;/h1&gt;
&lt;p&gt;转自： &lt;a href=&#34;https://fishc.com.cn/forum.php?mod=viewthread&amp;amp;tid=83418&amp;amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D571&#34;&gt;https://fishc.com.cn/forum.php?mod=viewthread&amp;amp;tid=83418&amp;amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D571&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Eric_S._Raymond&#34;&gt;作者：Eric S. Raymond&lt;/a&gt;
原文链接：http://www.catb.org/esr/structure-packing&lt;/p&gt;
&lt;h2 id=&#34;谁应阅读本文&#34;&gt;&lt;strong&gt;谁应阅读本文&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;如果你在内存容量受限的嵌入式系统中写程序，或者编写操作系统内核代码，就有必要了解这项技术。如果数据集巨大，应用时常逼近内存极限，这项技术会有所帮助。倘若你非常非常关心如何最大限度地减少处理器缓存段（cache-line）未命中情况的发生，这项技术也有所裨益。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2013 年底，我大量应用了一项 C 语言优化技术，这项技术是我早在二十余年前就已掌握的，但彼时之后，鲜有使用。&lt;/p&gt;
&lt;p&gt;通过精心调整结构成体员的顺序，可以在这种情况下大幅减少内存占用。其效果显著——在上述案例中，可以减少 40% 的内存空间。程序应用于更大的软件仓库，也不会因内存耗尽而崩溃。&lt;/p&gt;
&lt;p&gt;事出有因。计算机科学课程（正确地）引导人们远离微观优化，转而寻求更理想的算法。计算成本一路走低，令压榨内存的必要性变得越来越低。旧日里，黑客们通过在陌生的硬件架构中跌跌撞撞学习 —— 如今已不多见。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
