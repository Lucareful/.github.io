<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>装饰器 on Luenci</title>
    <link>http://localhost:1313/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
    <description>Recent content in 装饰器 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python的闭包和装饰器</title>
      <link>http://localhost:1313/articles/1/01/python%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/python%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>闭包 引入 函数名是一个特殊的变量，保存了函教的地址和 自定义一个变量可以获取函数地址 自定义变量调用函数 &amp;ldquo;函数名（）&amp;rdquo; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def work(): print(&amp;#34;我是一个测试函数&amp;#34;) ret = work print(ret) print(&amp;#34;地址：%X&amp;#34; % id(ret)) print(&amp;#34;地址：%X&amp;#34; % id(work)) ret() work() out: &amp;lt;function work at 0x00000161E3091E18&amp;gt; 地址：161E3091E18 地址：161E3091E18 我</description>
    </item>
    <item>
      <title>模块、迭代器，生成器和装饰器</title>
      <link>http://localhost:1313/articles/1/01/%E6%A8%A1%E5%9D%97%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/%E6%A8%A1%E5%9D%97%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>module模块和包的介绍 模块的介绍 python给我们提供了十分简单的方法去创建一个模块，我们只需要写一个python文件即可，也就是说写一个.py为后缀的文件。 包的介绍 简单来说，包就是多个模块的集合。当项目较大，模块较多时，我们就可以把模块放在包中，便于管理。 我们在包中一般带有__init__.py文件，随你建包的时候就默认生成。 迭代器和生成器 迭代器 迭代器只不过是一个实现迭代器协议的容器对象。它</description>
    </item>
  </channel>
</rss>
