<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>面向对象编程 on Luenci</title>
    <link>http://localhost:1313/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 面向对象编程 on Luenci</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python类中的 私有变量 和 私有方法</title>
      <link>http://localhost:1313/articles/1/01/python%E7%B1%BB%E4%B8%AD%E7%9A%84-%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F-%E5%92%8C-%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/1/01/python%E7%B1%BB%E4%B8%AD%E7%9A%84-%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F-%E5%92%8C-%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;python中的类&#34;&gt;Python中的类&lt;/h1&gt;
&lt;p&gt;原文转自：https://blog.csdn.net/sxingming/article/details/52875125&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认情况下，Python中的成员函数和成员变量都是公开的(public),在python中没有类似public,private等关键词来修饰成员函数和成员变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在python中定义私有变量只需要在变量名或函数名前加上 &lt;code&gt;__&lt;/code&gt;两个下划线，那么这个函数或变量就是私有的了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在内部，python使用一种 name mangling 技术，将 &lt;code&gt;__membername&lt;/code&gt;替换成&lt;code&gt; _classname__membername&lt;/code&gt;，也就是说，类的内部定义中,所有以双下划线开始的名字都被&amp;quot;翻译&amp;quot;成前面加上单下划线和类名的形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：为了保证不能在class之外访问私有变量，Python会在类的内部自动的把我们定义的&lt;code&gt;__spam&lt;/code&gt;私有变量的名字替换成为
&lt;code&gt;_classname__spam&lt;/code&gt;(注意，&lt;code&gt;classname&lt;/code&gt;前面是一个下划线，&lt;code&gt;spam&lt;/code&gt;前是两个下划线)，因此，用户在外部访问&lt;code&gt;__spam&lt;/code&gt;的时候就会提示找不到相应的变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python中的私有变量和私有方法仍然是可以访问的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问方法如下：
&lt;code&gt;私有变量:实例._类名__变量名&lt;/code&gt;
&lt;code&gt;私有方法:实例._类名__方法名()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实，Python并没有真正的私有化支持，但可用下划线得到伪私有。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;尽量避免定义以下划线开头的变量！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;（1）&lt;code&gt;_xxx &lt;/code&gt;   &amp;ldquo;单下划线 &amp;quot; 开始的成员变量叫做保护变量，意思是只有类实例和子类实例能访问到这些变量，
需通过类提供的接口进行访问；不能用&amp;rsquo;from module import *&amp;lsquo;导入&lt;/li&gt;
&lt;li&gt;（2）&lt;code&gt;__xxx &lt;/code&gt;  类中的私有变量/方法名 （Python的函数也是对象，所以成员方法称为成员变量也行得通。）,
&amp;quot; 双下划线 &amp;quot; 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。&lt;/li&gt;
&lt;li&gt;（3）&lt;code&gt;__xxx__ &lt;/code&gt;系统定义名字，前后均有一个“双下划线” 代表python里特殊方法专用的标识，如 &lt;code&gt;__init__（）&lt;/code&gt;代表类的构造函数。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
